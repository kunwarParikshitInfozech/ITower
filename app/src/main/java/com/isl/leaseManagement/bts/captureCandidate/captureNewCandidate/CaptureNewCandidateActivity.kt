package com.isl.leaseManagement.bts.captureCandidate.captureNewCandidate

import android.content.Intent
import android.os.Bundle
import androidx.databinding.DataBindingUtil
import com.isl.leaseManagement.api.ApiClient
import com.isl.leaseManagement.base.BaseActivity
import com.isl.leaseManagement.bts.captureCandidate.landlordDetails.LandlordDetailsActivity
import com.isl.leaseManagement.bts.captureCandidate.propertyDetails.PropertyDetailsActivity
import com.isl.leaseManagement.dataClasses.responses.CandidateDetailsAPIResponse
import com.isl.leaseManagement.sharedPref.KotlinPrefkeeper
import com.isl.leaseManagement.utils.ActionButtonMethods
import com.isl.leaseManagement.utils.AppConstants
import com.isl.leaseManagement.utils.MessageConstants
import infozech.itower.R
import infozech.itower.databinding.ActivityCaptureNewCandidateBinding
import io.reactivex.Observable
import io.reactivex.Observer
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposable
import io.reactivex.schedulers.Schedulers

class CaptureNewCandidateActivity : BaseActivity() {

    private lateinit var binding: ActivityCaptureNewCandidateBinding
    private var disposable: Disposable? = null
    private val api = ApiClient.request
    private var autoGeneratedID = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_capture_new_candidate)
        init()
    }

    private fun init() {
        setClickListeners()
        checkIfNewCandidateOrExisting()
    }

    private fun checkIfNewCandidateOrExisting() {
        autoGeneratedID = intent.getIntExtra(
            AppConstants.IntentKeys.autoGeneratedId,
            0
        )   // so, 0 means new candidate
        val candidateRemarks =
            intent.getStringExtra(AppConstants.IntentKeys.candidateRejectionRemarks)
        val propertyId =
            intent.getStringExtra(AppConstants.IntentKeys.propertyId)
        val candidateName =
            intent.getStringExtra(AppConstants.IntentKeys.candidateOrLandlordName)
        binding.rejectionRemarksValue.text = candidateRemarks ?: ""

        candidateName?.let { binding.captureCandidateTv.text = it }
        if (autoGeneratedID != 0) {  // not new, have to call get candidate details API if _Id is missing as property ID can be fetched from web or existing candidate
            oldCandidateSelected(autoGeneratedID, propertyId)
        }
    }

    private fun oldCandidateSelected(autoGeneratedID: Int, propertyId: String?) {
        val candidateDetailsDao = commonDatabase.candidateDetailsDao()
        disposable = candidateDetailsDao.getCandidateDetailsByAutoGeneratedId(autoGeneratedID)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe({ candidateDetailsResponse ->
                if (candidateDetailsResponse.propertyDetail?._id == null) { // need to get candidate details
                    propertyId?.let { getCandidatesFromAPI(it) }
                }
            }, { error ->
                propertyId?.let {
                    getCandidatesFromAPI(
                        it
                    )
                }  // error as details not present so, calling api and storing data
            })

    }

    private fun getCandidatesFromAPI(propertyId: String) {
        val observable: Observable<CandidateDetailsAPIResponse> =
            api!!.getCandidateDetails(
                tenantId = KotlinPrefkeeper.leaseManagementUserID!!,
                propertyId
            )
        observable.subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(object :
                Observer<CandidateDetailsAPIResponse> {
                override fun onSubscribe(d: Disposable) {
                }

                override fun onNext(t: CandidateDetailsAPIResponse) {
                    saveCandidateDetailsToRoom(propertyId, t)
                }

                override fun onError(e: Throwable) {
                    showToastMessage(MessageConstants.ErrorMessages.unableToGetLocationList)
                }

                override fun onComplete() {
                }
            })
    }

    private fun saveCandidateDetailsToRoom(
        propertyId: String,
        candidateDetailsAPIResponse: CandidateDetailsAPIResponse
    ) {
        candidateDetailsAPIResponse.autoGeneratedId = autoGeneratedID
        val candidateDetailsDao = commonDatabase.candidateDetailsDao()
        disposable = candidateDetailsDao.insertCandidateDetails(candidateDetailsAPIResponse)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe({
                showToastMessage("Saved to room!")
            }, { error ->
                showToastMessage("Unable to save to room!")
            })
    }

    private fun setClickListeners() {
        binding.backIv.setOnClickListener { finish() }
        binding.propertyDetails.setOnClickListener {
            val intent = Intent(
                this@CaptureNewCandidateActivity,
                PropertyDetailsActivity::class.java
            )
            intent.putExtra(
                AppConstants.IntentKeys.autoGeneratedId,
                autoGeneratedID
            )
            launchActivityWithIntent(intent)
        }

        binding.landlordDetails.setOnClickListener {
            val intent = Intent(
                this@CaptureNewCandidateActivity,
                LandlordDetailsActivity::class.java
            )
            intent.putExtra(
                AppConstants.IntentKeys.autoGeneratedId,
                autoGeneratedID
            )
            launchActivityWithIntent(intent)
        }
        binding.actionBtn.setOnClickListener {
            ActionButtonMethods.Actions.showActionPopup(
                this, ActionButtonMethods.ActionOpeningProcess.BtsCaptureCandidate
            )
        }
    }

}