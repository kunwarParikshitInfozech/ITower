package com.isl.leaseManagement.bts.captureCandidate.landlordDetails

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.isl.leaseManagement.base.BaseFragment
import com.isl.leaseManagement.dataClasses.responses.CandidateDetailsAPIResponse
import com.isl.leaseManagement.utils.AppConstants
import infozech.itower.databinding.FragmentEssentialLandlordBinding
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposable
import io.reactivex.schedulers.Schedulers

class EssentialLandlordFragment : BaseFragment() {

    private lateinit var binding: FragmentEssentialLandlordBinding
    private var disposable: Disposable? = null
    private var currentCandidateDetailsResponse =
        CandidateDetailsAPIResponse(     // initially passing 0,will update this later and  will use this throughout
            0,
            null, null, null, null, null
        )
    private var autoGeneratedId = 0

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentEssentialLandlordBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        init()
    }

    private fun init() {
        autoGeneratedId =
            (arguments?.getString(AppConstants.IntentKeys.autoGeneratedId)?.toInt()) ?: 0
        if (autoGeneratedId != 0) {
            getCandidateData()
        }
        setClickListeners()
    }

    private fun setClickListeners() {
        binding.saveAsDraftBtn.setOnClickListener { checkAutoGenUniqueIdAndSaveToRoom() }
    }

    private fun checkAutoGenUniqueIdAndSaveToRoom() {
        if (autoGeneratedId == 0) {  // new candidate so creating new Unique ID, unique in existing captured candidate table as well
            val existingCapturedCandidateDao =
                baseActivity.commonDatabase.existingCandidateListResponseItemDao()
            disposable = existingCapturedCandidateDao.getMaxId().subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread()).subscribe(
                    { maxId ->
                        autoGeneratedId =
                            (maxId
                                ?: 0) + 1  // Increment the max ID, or start from 1 if no IDs exist
                        //                  updateCandidateForSavingToRoom()   // saving with new ID
                    }, { error ->
                        //       saveCandidateToRoom()
                    }
                )
        } else {
            //     updateCandidateForSavingToRoom()  // saving with pre existing Unique ID
        }
    }

//    private fun updateCandidateForSavingToRoom() {
//        currentCandidateDetailsResponse.autoGeneratedId = autoGeneratedId
//        if (currentCandidateDetailsResponse.propertyDetail == null) {  //if it is blank that is not saved yet, creating new
//            currentCandidateDetailsResponse.propertyDetail =
//                CandidateDetailsAPIResponse.PropertyDetails()
//        }
//        currentCandidateDetailsResponse.propertyDetail!!.let {  //now, can not be null
//                property ->
//            property.landlordPrice = binding.landlordPriceEt.text.toString()
//            property.siteAddress = binding.siteAddressET.text.toString()
//            property.siteDistrictLocal = binding.siteDistrictArabicValue.text.toString()
//            property.siteCityLocal = binding.siteCityArabicValue.text.toString()
//            property.siteStreet = binding.siteStreetEt.text.toString()
//            property.siteStreetInArabic = binding.siteStreetArabicEt.text.toString()
//            property.distanceFromRoadInMeter = binding.distanceFromRoadEt.text.toString()
//            property.siteNeighbourhood = binding.siteNeighbourhoodEt.text.toString()
//            property.siteNeighbourhoodInArabic = binding.siteNeighbourhoodArabicEt.text.toString()
//            property.latitude = binding.latitudeEt.text.toString()
//            property.longitude = binding.longitudeEt.text.toString()
//            property.distanceFromNominalInMeter = binding.distanceFromNominalValue.text.toString()
//            property.approxBuildingHeightWithoutParapetInMeter =
//                binding.approxBuildingHeightWithoutParaperET.text.toString()
//            property.ownerApprovalToInstallSubStation =
//                binding.ownerApprovalToInstallSubstationET.text.toString()
//            property.powerSourceDistanceFromSubstation =
//                binding.powerSourceDistanceSubstationET.text.toString()
//            property.powerSourceDistanceFromRoad = binding.powerSourceDistanceRoadET.text.toString()
//            property.scecoAccessToRoad = binding.scecoAccessToRoadET.text.toString()
//            property.siteArea = binding.siteAreaLengthWidthET.text.toString()
//            property.leaseAreaInSqMtr = binding.leaseAreaET.text.toString()
//            property.nearestElectricityPointDistanceInMeter =
//                binding.nearestElectricityPointDistanceET.text.toString()
//            property.distanceFromNearestOperatorTower =
//                binding.distanceFromNearestOperatorET.text.toString()
//            property.ownerDeedAndIdDoc = binding.potentialPropertyStatusET.text.toString()
//        }
//        saveCandidateDetailsToRoom(currentCandidateDetailsResponse)
//    }

    private fun saveCandidateDetailsToRoom(
        candidateDetailsAPIResponse: CandidateDetailsAPIResponse
    ) {
        val candidateDetailsDao = baseActivity.commonDatabase.candidateDetailsDao()
        disposable = candidateDetailsDao.insertCandidateDetails(candidateDetailsAPIResponse)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe({
                baseActivity.showToastMessage("Saved to room!")
            }, { error ->
                baseActivity.showToastMessage("Unable to save to room!")
            })
    }

    private fun getCandidateData(propertyId: String? = null) {
        val candidateDetailsDao = baseActivity.commonDatabase.candidateDetailsDao()
        disposable = candidateDetailsDao.getCandidateDetailsByAutoGeneratedId(autoGeneratedId)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe({ candidateDetailsResponse ->
                if (candidateDetailsResponse.propertyDetail?._id != null) { // need to get candidate details
                    currentCandidateDetailsResponse =
                        candidateDetailsResponse
                    //       fillCandidateDetails(candidateDetailsResponse)
                }
            }, { error -> // error as details not present so, not filling details
            })

    }

//    private fun fillCandidateDetails(candidateDetailsResponse: CandidateDetailsAPIResponse) {
//        candidateDetailsResponse.propertyDetail?.let { property ->
//            binding.propertyIdET.setText(property.propertyId ?: "")
//            binding.landlordPriceEt.setText(property.landlordPrice ?: "")
//            binding.siteAddressET.setText(property.siteAddress ?: "")
//            binding.siteDistrictArabicValue.setText(property.siteDistrictLocal ?: "")
//            binding.siteCityArabicValue.setText(property.siteCityLocal ?: "")
//            binding.siteStreetEt.setText(property.siteStreet ?: "")
//            binding.siteStreetArabicEt.setText(property.siteStreetInArabic ?: "")
//            binding.distanceFromRoadEt.setText(property.distanceFromRoadInMeter ?: "")
//            binding.siteNeighbourhoodEt.setText(property.siteNeighbourhood ?: "")
//            binding.siteNeighbourhoodArabicEt.setText(property.siteNeighbourhoodInArabic ?: "")
//            binding.latitudeEt.setText(property.latitude ?: "")
//            binding.longitudeEt.setText(property.longitude ?: "")
//            binding.distanceFromNominalValue.setText(
//                property.distanceFromNominalInMeter ?: ""
//            )
//            binding.approxBuildingHeightWithoutParaperET.setText(
//                property.approxBuildingHeightWithoutParapetInMeter ?: ""
//            )
//            binding.ownerApprovalToInstallSubstationET.setText(
//                property.ownerApprovalToInstallSubStation ?: ""
//            )
//            binding.powerSourceDistanceSubstationET.setText(
//                property.powerSourceDistanceFromSubstation ?: ""
//            )
//            binding.powerSourceDistanceRoadET.setText(
//                property.powerSourceDistanceFromRoad ?: ""
//            )
//            binding.scecoAccessToRoadET.setText(property.scecoAccessToRoad ?: "")
//            binding.siteAreaLengthWidthET.setText(property.siteArea ?: "")
//            binding.leaseAreaET.setText(property.leaseAreaInSqMtr ?: "")
//            binding.nearestElectricityPointDistanceET.setText(
//                property.nearestElectricityPointDistanceInMeter ?: ""
//            )
//            binding.distanceFromNearestOperatorET.setText(
//                property.distanceFromNearestOperatorTower ?: ""
//            )
//            binding.potentialPropertyStatusET.setText(property.ownerDeedAndIdDoc ?: "")
//        }
//    }

}