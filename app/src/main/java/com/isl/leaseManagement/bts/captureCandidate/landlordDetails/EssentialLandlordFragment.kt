package com.isl.leaseManagement.bts.captureCandidate.landlordDetails

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.isl.leaseManagement.base.BaseFragment
import com.isl.leaseManagement.dataClasses.responses.CandidateDetailsAPIResponse
import com.isl.leaseManagement.roomKotlin.dao.getCandidateData
import com.isl.leaseManagement.utils.AppConstants
import infozech.itower.databinding.FragmentEssentialLandlordBinding
import io.reactivex.disposables.Disposable

class EssentialLandlordFragment : BaseFragment() {

    private lateinit var binding: FragmentEssentialLandlordBinding
    private var disposable: Disposable? = null
    private var currentCandidateDetailsResponse =
        CandidateDetailsAPIResponse(     // initially passing 0,will update this later and  will use this throughout
            0,
            null, null, null, null, null
        )
    private var autoGeneratedId = 0

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentEssentialLandlordBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        init()
    }

    private fun init() {
        autoGeneratedId =
            (arguments?.getString(AppConstants.IntentKeys.autoGeneratedId)?.toInt()) ?: 0
        getLandlordDataFromRoom()
    }

    private fun getLandlordDataFromRoom() {
        if (autoGeneratedId != 0) {
            getCandidateData(baseActivity, autoGeneratedId) { candidateResponse ->
                fillLandlordData(candidateResponse)
            }
        }
    }

    private fun fillLandlordData(candidateResponse: CandidateDetailsAPIResponse?) {
        candidateResponse?.landlordDetail?.let { landlordDetail ->
            binding.landlordIdET.setText(landlordDetail.landlordId ?: "")
            binding.landlordIdNumberValue.setText(
                landlordDetail.landlordNationalIdNumber ?: ""
            )
            binding.commercialRegistrationNumberValue.setText(
                landlordDetail.commercialRegistrationNumber ?: ""
            )
            binding.landlordNameValue.setText(landlordDetail.landlordName ?: "")
            binding.landlordNameArabicValue.setText(
                landlordDetail.landlordNameInArabic ?: ""
            )
            binding.landlordRegionArabicValue.setText(
                landlordDetail.landlordRegionNameInArabic ?: ""
            )
            binding.landlordDistrictArabicValue.setText(
                landlordDetail.landlordDistrictNameInArabic ?: ""
            )
            binding.landlordCityArabicValue.setText(
                landlordDetail.landlordCityNameInArabic ?: ""
            )
            binding.nationalPoBoxNumberETValue.setText(
                landlordDetail.nationalPOBoxNumber?.toString() ?: ""
            )
            binding.justificationForInEligibleCandidateValue.setText(
                landlordDetail.justificationForIneligibleCandidate ?: ""
            )

            //now selecting spinner and fields show/hide based on the selected value
        }
    }

}