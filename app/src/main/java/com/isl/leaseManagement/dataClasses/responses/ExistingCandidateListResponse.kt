package com.isl.leaseManagement.dataClasses.responses

import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class ExistingCandidateListResponse :
    ArrayList<ExistingCandidateListResponse.ExistingCandidateListResponseItem>() {
    @Entity
    data class ExistingCandidateListResponseItem(
        @PrimaryKey(autoGenerate = true) val autoGeneratedId: Int = 0, //for room unique identification,not from api
        var taskId: Int,   // for room
        val _Id: Int?,
        val landlordId: String?,
        val landlordName: String?,
        val propertyId: String?,             //getting this in both api i.e. existing candidate and link existing candidate so this will be used for mapping correct candidate data
        val propertyCity: String?,
        val propertyDistrict: String?,
        val remarks: String?,               //until here getting data from existing captured candidate list in starttask
        val candidateId: Int?,            //now from here getting after saving existing captured candidate by link existing candidate API
        val isPropertyValid: Boolean = false,    //from saving/liking candidate api and for all below fields as well
        val isLandlordValid: Boolean = false,
        val isAccountValid: Boolean = false,
        val isDelegateValid: Boolean = false,
        val isDocValid: Boolean = false,
        var isItemSelected: Boolean = false       //not getting from api & not required in room, just for internal select all functionality in CapturedCandidate  Screen
    )
}


class ExistingCandidateListResponseConverter {     //note - the above existing item is used is 3 APIs, 1 is existing candidate, 2nd after linking candidate and 3rd in starttask as list of items. So for that we need type converter not for other saving
    private val gson = Gson()

    @TypeConverter
    fun fromString(value: String?): ExistingCandidateListResponse? {
        return gson.fromJson(
            value,
            object : TypeToken<ExistingCandidateListResponse>() {}.type
        )
    }

    @TypeConverter
    fun toString(data: ExistingCandidateListResponse?): String? {
        return gson.toJson(data)
    }
}
